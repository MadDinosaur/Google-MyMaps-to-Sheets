function main() {
    var places = getPlaces();
    getColumnInfo(places);
    writeToSheet(places);
}

function getPlaces() {
    var myMapsPage = "https://www.google.com/maps/d/u/1/viewer?mid=1vOHuW8c0lTLdo7fA__cJGCmmcTP9rq6a&ll=51.19241978650809%2C-0.10540584999989733&z=9";
    var mapPage = UrlFetchApp.fetch(MyMapsPage);
    var sourceCode = mapPage.getContentText(); //returns String with HTML page code
    var places = []; //multidimensional array with each position being [country,city,placeName,type,coordenate] 
    var start = 0;
    var finder = '\\"]\\n,[[\\"'; //weird set of characters that precedes every place name
    
    //saves every place it finds in the places array
    while (sourceCode.indexOf(finder, start) > -1) {
        //find place
        var placeStart = sourceCode.indexOf(finder, start) + finder.length;
        var placeEnd = sourceCode.indexOf("\\", placeStart);
        var place = sourceCode.substring(placeStart, placeEnd);

        //find coordenates
        var coordStart = sourceCode.indexOf("[", placeStart - 85) + 1;
        var coordEnd = sourceCode.indexOf("]", coordStart);
        var coordenate = sourceCode.substring(coordStart, coordEnd);
        places.push([" ", " ", place," ", coordenate]);
        start = placeEnd;
    }

    places.pop();

    //return places;
    return places;
}

function getColumnInfo(places) {
    for (var index = 0; index < places.length; index++) {
        var latitude = places[index][4].split(",")[0];
        var longitude = places[index][4].split(",")[1];
      
        var address = Maps.newGeocoder().reverseGeocode(latitude, longitude);
        var compound_code = address.plus_code.compound_code.split(",");
        
        /*Translates the country and city names to another language (other than English)
        * You can replace 'pt' (Portuguese) with the desired language
        */
        var language = 'pt';
        var country = LanguageApp.translate(compound_code[compound_code.length - 1].trim(), 'en', language);
        var city = LanguageApp.translate(compound_code[compound_code.length - 2].split(" ")[1], 'en', language);
        
      var types = address.results[0].types;
      var type = false; var i = 0;   
      /*Finds the type of place and puts it in a category
      * The types are translated to portuguese here but they are, in order of appearence:
      * Food; Activity; Landscape; Shopping; Museum; Lodging; Other
      */
      while (type == false) {
        switch (types[i]) {
          case "bakery": case "bar": case "cafe": case "restaurant": case "food":
            type = "Comida";
            break;
          case "amusement_park": case "aquarium": case "bowling_alley": case "campground": case "casino": case "hindu_temple": case "mosque": case "movie_theater": case "night_club": case "synagogue": case "zoo":
            type = "Atividade";
            break;
          case "church": case "park":
            type = "Paisagem";
            break;
          case "book_store": case "clothing_store": case "convenience_store": case "department_store": case "drugstore": case "grocery_or_supermarket": case "jewelry_store": case "shopping_mall": case "store":
            type = "Compras";
            break;
          case "art_gallery": case "library": case "museum":
            type = "Museu";
            break;
          case "lodging":
            type = "Alojamento";
            break;
          default:
            if (i == types.length - 1)
              type = "404 What is this?";
            else
              i++;
      }
      }
        places[index][0] = country;
        places[index][1] = city;
        places[index][3] = type;
    }
}

function writeToSheet(places) {
    var spreadsheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

    for (var index = 0; index < places.length; index++) {
        var isNewPlace = checkExistingPlaces(spreadsheet, places[index][2], places[index][1]); //check if place is already in the spreadsheet
        
        if (isNewPlace) {
          places[index].pop(); //drops coordenates from array
          places[index].push("Não","Generated by script"); 
          spreadsheet.appendRow(places[index]); //writes information in spreadsheet
          spreadsheet.getFilter().sort(1, true); //sorts information on spreadsheet by country name
        }
    }
}

function checkExistingPlaces(spreadsheet, name, city) {
    //Spreadsheet column that stores the names of the places, in this case it is the 3rd column
    var namesColumn = spreadsheet.getRange(2, 3, spreadsheet.getLastRow()).getValues();
    //Spreadsheet column that stores the names of the cities, in this case it is the 2nd column
    var citiesColumn = spreadsheet.getRange(2, 2, spreadsheet.getLastRow()).getValues();

    //search starts at the first index where the city appears in the column "Localidade"
    var index = spreadsheet.createTextFinder(city).matchEntireCell(true).findNext();

    if (index == undefined)
        return true;
    else
        index = index.getRow() - 2;

    while (index <= namesColumn.length && city == citiesColumn[index]) { //only searches for a matching place name within the same city
        if (name.toUpperCase() == namesColumn[index].toString().toUpperCase()) //searches the column "Nome" for a place with the same name (case insensitive)
            return false;

        index++;
    }

    return true;
}

//TODO tentar fazer formatação automática
